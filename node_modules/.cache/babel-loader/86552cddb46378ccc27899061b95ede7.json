{"ast":null,"code":"var _jsxFileName = \"/home/nenel/projetos github pessoal/projeto star wars/star-wars-planet-search/src/context/PlanetsProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport useMountPlanets from '../hooks/useMountPlanets';\nimport filterPlanets from '../services/filterPlanets';\nimport btnFilterByNumeric from '../services/btnFilterByNumeric';\n\nfunction PlanetsProvider(_ref) {\n  let {\n    children\n  } = _ref;\n  const [planets] = useMountPlanets();\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [filterNumber, setFilterNumber] = useState(0);\n  const [filterCompare, setFilterCompare] = useState('maior que');\n  const [filterColumn, setFilterColumn] = useState('population');\n  const [renderColumns, setRenderColumn] = useState(['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n  useEffect(() => {\n    setFilteredPlanets(planets);\n  }, [planets]);\n  const planetsContext = {\n    renderColumns,\n    filteredPlanets,\n    filterPlanets: inputValue => {\n      const updatePlanets = filterPlanets(inputValue, planets);\n      setFilteredPlanets(updatePlanets);\n    },\n    handleFilterBtn: () => {\n      const [filtered, column] = btnFilterByNumeric(filterColumn, filterNumber, filterCompare, planets);\n      setFilteredPlanets(filtered);\n      const NEW_ARRAY = renderColumns;\n      const index = NEW_ARRAY.indexOf(column);\n      NEW_ARRAY.splice(index, 1);\n      setRenderColumn(NEW_ARRAY);\n    },\n    saveInputNumber: inputNumberValue => {\n      setFilterNumber(inputNumberValue);\n    },\n    saveCompare: inputNumberValue => {\n      setFilterCompare(inputNumberValue);\n    },\n    saveColumn: inputNumberValue => {\n      setFilterColumn(inputNumberValue);\n    }\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: planetsContext,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.objectOf(Object).isRequired\n};\nexport default PlanetsProvider;","map":{"version":3,"sources":["/home/nenel/projetos github pessoal/projeto star wars/star-wars-planet-search/src/context/PlanetsProvider.js"],"names":["React","useEffect","useState","PropTypes","PlanetsContext","useMountPlanets","filterPlanets","btnFilterByNumeric","PlanetsProvider","children","planets","filteredPlanets","setFilteredPlanets","filterNumber","setFilterNumber","filterCompare","setFilterCompare","filterColumn","setFilterColumn","renderColumns","setRenderColumn","planetsContext","inputValue","updatePlanets","handleFilterBtn","filtered","column","NEW_ARRAY","index","indexOf","splice","saveInputNumber","inputNumberValue","saveCompare","saveColumn","propTypes","objectOf","Object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,eAAP,MAA4B,0BAA5B;AACA,OAAOC,aAAP,MAA0B,2BAA1B;AACA,OAAOC,kBAAP,MAA+B,gCAA/B;;AAEA,SAASC,eAAT,OAAuC;AAAA,MAAd;AAAEC,IAAAA;AAAF,GAAc;AACrC,QAAM,CAACC,OAAD,IAAYL,eAAe,EAAjC;AACA,QAAM,CAACM,eAAD,EAAkBC,kBAAlB,IAAwCV,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAACW,YAAD,EAAeC,eAAf,IAAkCZ,QAAQ,CAAC,CAAD,CAAhD;AACA,QAAM,CAACa,aAAD,EAAgBC,gBAAhB,IAAoCd,QAAQ,CAAC,WAAD,CAAlD;AACA,QAAM,CAACe,YAAD,EAAeC,eAAf,IAAkChB,QAAQ,CAAC,YAAD,CAAhD;AACA,QAAM,CAACiB,aAAD,EAAgBC,eAAhB,IAAmClB,QAAQ,CAAC,CAChD,YADgD,EAClC,gBADkC,EAChB,UADgB,EACJ,iBADI,EACe,eADf,CAAD,CAAjD;AAGAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,kBAAkB,CAACF,OAAD,CAAlB;AACD,GAFQ,EAEN,CAACA,OAAD,CAFM,CAAT;AAIA,QAAMW,cAAc,GAAG;AACrBF,IAAAA,aADqB;AAErBR,IAAAA,eAFqB;AAGrBL,IAAAA,aAAa,EAAGgB,UAAD,IAAgB;AAC7B,YAAMC,aAAa,GAAGjB,aAAa,CAACgB,UAAD,EAAaZ,OAAb,CAAnC;AACAE,MAAAA,kBAAkB,CAACW,aAAD,CAAlB;AACD,KANoB;AAOrBC,IAAAA,eAAe,EAAE,MAAM;AACrB,YAAM,CAACC,QAAD,EAAWC,MAAX,IAAqBnB,kBAAkB,CAC3CU,YAD2C,EAC7BJ,YAD6B,EACfE,aADe,EACAL,OADA,CAA7C;AAGAE,MAAAA,kBAAkB,CAACa,QAAD,CAAlB;AACA,YAAME,SAAS,GAAGR,aAAlB;AACA,YAAMS,KAAK,GAAGD,SAAS,CAACE,OAAV,CAAkBH,MAAlB,CAAd;AACAC,MAAAA,SAAS,CAACG,MAAV,CAAiBF,KAAjB,EAAwB,CAAxB;AACAR,MAAAA,eAAe,CAACO,SAAD,CAAf;AACD,KAhBoB;AAiBrBI,IAAAA,eAAe,EAAGC,gBAAD,IAAsB;AACrClB,MAAAA,eAAe,CAACkB,gBAAD,CAAf;AACD,KAnBoB;AAoBrBC,IAAAA,WAAW,EAAGD,gBAAD,IAAsB;AACjChB,MAAAA,gBAAgB,CAACgB,gBAAD,CAAhB;AACD,KAtBoB;AAuBrBE,IAAAA,UAAU,EAAGF,gBAAD,IAAsB;AAChCd,MAAAA,eAAe,CAACc,gBAAD,CAAf;AACD;AAzBoB,GAAvB;AA4BA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGX,cAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGZ,QADH,CADF;AAKD;;AAEDD,eAAe,CAAC2B,SAAhB,GAA4B;AAC1B1B,EAAAA,QAAQ,EAAEN,SAAS,CAACiC,QAAV,CAAmBC,MAAnB,EAA2BC;AADX,CAA5B;AAIA,eAAe9B,eAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport useMountPlanets from '../hooks/useMountPlanets';\nimport filterPlanets from '../services/filterPlanets';\nimport btnFilterByNumeric from '../services/btnFilterByNumeric';\n\nfunction PlanetsProvider({ children }) {\n  const [planets] = useMountPlanets();\n  const [filteredPlanets, setFilteredPlanets] = useState([]);\n  const [filterNumber, setFilterNumber] = useState(0);\n  const [filterCompare, setFilterCompare] = useState('maior que');\n  const [filterColumn, setFilterColumn] = useState('population');\n  const [renderColumns, setRenderColumn] = useState([\n    'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water']);\n\n  useEffect(() => {\n    setFilteredPlanets(planets);\n  }, [planets]);\n\n  const planetsContext = {\n    renderColumns,\n    filteredPlanets,\n    filterPlanets: (inputValue) => {\n      const updatePlanets = filterPlanets(inputValue, planets);\n      setFilteredPlanets(updatePlanets);\n    },\n    handleFilterBtn: () => {\n      const [filtered, column] = btnFilterByNumeric(\n        filterColumn, filterNumber, filterCompare, planets,\n      );\n      setFilteredPlanets(filtered);\n      const NEW_ARRAY = renderColumns;\n      const index = NEW_ARRAY.indexOf(column);\n      NEW_ARRAY.splice(index, 1);\n      setRenderColumn(NEW_ARRAY);\n    },\n    saveInputNumber: (inputNumberValue) => {\n      setFilterNumber(inputNumberValue);\n    },\n    saveCompare: (inputNumberValue) => {\n      setFilterCompare(inputNumberValue);\n    },\n    saveColumn: (inputNumberValue) => {\n      setFilterColumn(inputNumberValue);\n    },\n  };\n\n  return (\n    <PlanetsContext.Provider value={ planetsContext }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nPlanetsProvider.propTypes = {\n  children: PropTypes.objectOf(Object).isRequired,\n};\n\nexport default PlanetsProvider;\n"]},"metadata":{},"sourceType":"module"}